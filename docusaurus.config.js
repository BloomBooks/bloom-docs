// @ts-check
// Note: type annotations allow type checking and IDEs autocompletion

const { themes } = require("prism-react-renderer");
const lightCodeTheme = themes.github;
const darkCodeTheme = themes.dracula;

/** @type {import('@docusaurus/types').Config} */
const config = {
  title: "Bloom Docs",
  staticDirectories: ["static"],
  tagline: "Let's grow a library",
  url: "https://docs.bloomlibrary.org",
  baseUrl: "/",
  onBrokenLinks: "throw",
  onBrokenMarkdownLinks: "warn",
  // Duplicate routes cause the next/prev buttons to loop
  // which causes the pdf creation to loop forever.
  onDuplicateRoutes: "throw",
  favicon: "img/favicon.ico",
  organizationName: "BloomBooks",
  projectName: "bloom-docs",
  trailingSlash: true,

  plugins: ["@docusaurus/plugin-ideal-image"],
  presets: [
    [
      "classic",
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          routeBasePath: "/", // Serve the docs at the site's root
          sidebarPath: undefined, //  `undefined` to create a fully autogenerated sidebar.
          admonitions: {
            // https://github.com/elviswolcott/remark-admonitions
            /* I couldn't get an svg with a <text/> to work, and I don't want all the other icons to switch to the emoji version, and remark-admonitions doesn't allow
             for a fallback from svg to emoji if svg is missing, and I wasn't able to get a patch to remark-admonitions to get used by docusaurus. Sigh.
            customTypes: {
              construction: {
                ifmClass: "xx",
                keyword: "yy",
                emoji: "ðŸš§",
                 svg: '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"> <text x="0" y="15">ðŸš§</text></svg>',
              },
            },
            */
          },
        },
        blog: false,
        theme: {
          customCss: [
            require.resolve("./css/docu-notion-styles.css"),
            require.resolve("./src/css/custom.css"),
          ],
        },
        gtag: {
          trackingID: "G-QCEC01ZX3Y",
          anonymizeIP: true,
        },
      }),
    ],
  ],
  i18n: {
    defaultLocale: "en",
    locales: ["en"],
    // For now, we don't have enough translated to justify shipping other languages.
    // When we start building these again, there are other changes needed in the GHA
    // workflows to reenable the Crowdin downloads.
    // locales: ["en", "fr", "es"],
    localeConfigs: {
      en: {
        label: "English",
        direction: "ltr",
        htmlLang: "en-US",
        calendar: "gregory",
      },
      // fr: {
      //   label: "franÃ§ais",
      //   direction: "ltr",
      //   htmlLang: "fr",
      //   calendar: "gregory",
      // },
      // es: {
      //   label: "espaÃ±ol",
      //   direction: "ltr",
      //   htmlLang: "es",
      //   calendar: "gregory",
      // },
    },
  },
  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      metadata: [
        {
          name: "keywords",
          content: "Bloom, SIL, documentation, help, training",
        },
      ],
      sitemap: {
        // https://www.sitemaps.org/protocol.html#xmlTagDefinitions
        changefreq: "weekly",
        priority: 0.5,
        ignorePatterns: [],
      },
      navbar: {
        title: "Bloom Docs",
        logo: {
          alt: "Bloom Site Logo",
          src: "img/logo.svg",
        },

        items: [
          {
            type: "doc",
            label: "PDF Downloads",
            position: "right",
            docId: "downloads",
          },
          // As of Aug 2023, we don't really have enough translation done to warrant having a locale chooser.
          // {
          //   type: "localeDropdown",
          //   position: "right",
          // },
        ],
      },

      prism: {
        theme: lightCodeTheme,
        darkTheme: darkCodeTheme,
      },
      algolia: {
        appId: "FI2OI4JBTP",
        apiKey: "253f0884b36e9c259962fcd4c94c4c44",
        indexName: "bloom",
        contextualSearch: true,
        searchParameters: {},
        askAi: {
          assistantId: "BrDlTKUo3zcu", // this is the gemini 2.5 flash lite on
          indexName: "bloom-markdown",
        },
      },
    }),
};

module.exports = config;
